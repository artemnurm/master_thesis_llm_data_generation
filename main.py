#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –ø–∏—Å–µ–º
–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –∏–∑ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–æ–π –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–∏
"""

import argparse
import logging
import yaml
from pathlib import Path
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from src.experiments.experiment_runner import ExperimentRunner
from src.utils.visualization import create_experiment_dashboard, generate_results_table


def setup_logging(config: dict):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log_level = getattr(logging, config.get('logging', {}).get('level', 'INFO'))
    
    logging.basicConfig(
        level=log_level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('experiment.log') if config.get('logging', {}).get('save_logs', True) else logging.NullHandler()
        ]
    )


def load_config(config_path: str) -> dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        return config
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)


def run_baseline_only(config: dict):
    """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞...")
    
    runner = ExperimentRunner(config)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    train_df, test_df, services_df = runner.load_and_analyze_data()
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: –æ–±—É—á–µ–Ω–∏–µ={len(train_df)}, —Ç–µ—Å—Ç={len(test_df)}")
    
    # –ë–∞–∑–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
    baseline_results = runner.run_baseline_experiment(train_df, test_df)
    runner.results['experiments']['baseline'] = baseline_results
    
    # –û—Ç—á–µ—Ç
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞–∑–æ–≤–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞:")
    print(f"Accuracy: {baseline_results['test_metrics']['accuracy']:.3f}")
    print(f"F1-score: {baseline_results['test_metrics']['f1_weighted']:.3f}")
    print(f"Precision: {baseline_results['test_metrics']['precision_weighted']:.3f}")
    print(f"Recall: {baseline_results['test_metrics']['recall_weighted']:.3f}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    summary = runner.generate_summary_report()
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {runner.experiment_dir}")


def run_synthetic_experiments(config: dict):
    """–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    runner = ExperimentRunner(config)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    train_df, test_df, services_df = runner.load_and_analyze_data()
    
    # –ë–∞–∑–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
    print("‚ö° –ë–∞–∑–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç...")
    baseline_results = runner.run_baseline_experiment(train_df, test_df)
    runner.results['experiments']['baseline'] = baseline_results
    baseline_f1 = baseline_results['test_metrics']['f1_weighted']
    
    # –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è
    print("‚ö° –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    synthetic_results = runner.run_synthetic_augmentation_experiment(train_df, test_df)
    runner.results['experiments']['synthetic_augmentation'] = synthetic_results
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    print(f"–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å: F1-score = {baseline_f1:.3f}")
    
    best_synthetic = max(synthetic_results.values(), 
                        key=lambda x: x['test_metrics']['f1_weighted'])
    best_f1 = best_synthetic['test_metrics']['f1_weighted']
    best_size = best_synthetic['synthetic_size']
    improvement = ((best_f1 - baseline_f1) / baseline_f1) * 100
    
    print(f"–õ—É—á—à–∏–π —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π ({best_size} –ø—Ä–∏–º–µ—Ä–æ–≤): F1-score = {best_f1:.3f} (+{improvement:.1f}%)")
    
    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
    print("\nüìà –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:")
    for size, result in sorted(synthetic_results.items(), key=lambda x: x[1]['synthetic_size']):
        f1 = result['test_metrics']['f1_weighted']
        size_val = result['synthetic_size']
        improvement = ((f1 - baseline_f1) / baseline_f1) * 100
        print(f"  {size_val:3d} –ø—Ä–∏–º–µ—Ä–æ–≤: F1-score = {f1:.3f} ({improvement:+.1f}%)")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    summary = runner.generate_summary_report()
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {runner.experiment_dir}")


def run_full_experiments(config: dict):
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤...")
    print("   (–ë–∞–∑–æ–≤—ã–π + –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ + LLM + –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤)")
    
    runner = ExperimentRunner(config)
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
    results = runner.run_full_experiment_suite()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
    if config.get('visualization', {}).get('create_dashboard', True):
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...")
        plots_dir = runner.experiment_dir / 'plots'
        saved_plots = create_experiment_dashboard(results, plots_dir)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(saved_plots)} –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ {plots_dir}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    results_table = generate_results_table(results)
    table_path = runner.experiment_dir / 'results_table.csv'
    results_table.to_csv(table_path, index=False, encoding='utf-8')
    
    # –ü–µ—á–∞—Ç—å —Å–≤–æ–¥–∫–∏
    print("\nüéØ –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("=" * 60)
    
    baseline_f1 = results['experiments']['baseline']['test_metrics']['f1_weighted']
    print(f"–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å (—Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ): F1-score = {baseline_f1:.3f}")
    
    # –õ—É—á—à–∏–π —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if 'synthetic_augmentation' in results['experiments']:
        synthetic_results = results['experiments']['synthetic_augmentation']
        best_synthetic = max(synthetic_results.values(), 
                           key=lambda x: x['test_metrics']['f1_weighted'])
        best_f1 = best_synthetic['test_metrics']['f1_weighted'] 
        best_size = best_synthetic['synthetic_size']
        improvement = ((best_f1 - baseline_f1) / baseline_f1) * 100
        print(f"–õ—É—á—à–∏–π —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ ({best_size}): F1-score = {best_f1:.3f} (+{improvement:.1f}%)")
    
    # –õ—É—á—à–∏–π LLM —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if 'llm_generation' in results['experiments']:
        llm_results = results['experiments']['llm_generation']
        best_llm = max(llm_results.values(), 
                      key=lambda x: x['test_metrics']['f1_weighted'])
        llm_f1 = best_llm['test_metrics']['f1_weighted']
        llm_size = best_llm['llm_size']
        llm_improvement = ((llm_f1 - baseline_f1) / baseline_f1) * 100
        print(f"–õ—É—á—à–∏–π —Å LLM –¥–∞–Ω–Ω—ã–º–∏ ({llm_size}): F1-score = {llm_f1:.3f} (+{llm_improvement:.1f}%)")
    
    print("=" * 60)
    print(f"‚úÖ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {runner.experiment_dir}")
    
    # –û—Ç—á–µ—Ç
    summary = runner.generate_summary_report()
    
    return results


def run_analysis_only(config: dict):
    """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
    print("üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...")
    
    runner = ExperimentRunner(config)
    train_df, test_df, services_df = runner.load_and_analyze_data()
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
    print(f"–û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(train_df)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    print(f"–¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(test_df)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    print(f"–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É—Å–ª—É–≥: {len(services_df)} —É—Å–ª—É–≥")
    
    class_dist = train_df['class'].value_counts()
    print(f"\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –≤ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ:")
    print(f"–ö–ª–∞—Å—Å 0 (–æ–±—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã): {class_dist[0]} ({class_dist[0]/len(train_df)*100:.1f}%)")
    print(f"–ö–ª–∞—Å—Å 1 (—Å –∫–æ–¥–∞–º–∏ —É—Å–ª—É–≥): {class_dist[1]} ({class_dist[1]/len(train_df)*100:.1f}%)")
    print(f"–î–∏—Å–±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤: {class_dist[0]/class_dist[1]:.1f}:1")
    
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {runner.experiment_dir}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –ø–∏—Å–µ–º')
    parser.add_argument('--config', default='config.yaml', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--mode', choices=['full', 'baseline', 'synthetic', 'analysis'], 
                       default='full', help='–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not Path(args.config).exists():
        print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {args.config} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config(args.config)
    setup_logging(config)
    
    print("üî¨ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –ø–∏—Å–µ–º")
    print("üìö –ú–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∞—è –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏—è - –ú–µ—Ç–æ–¥—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("üéì –ê–≤—Ç–æ—Ä: –ù—É—Ä–º—É—Ö–∞–º–µ—Ç–æ–≤ –ê.–ù., –ù–ò –¢–ì–£, 2025")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data_path = Path(config.get('data_path', 'data/raw'))
    if not data_path.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ {data_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Excel —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ data/raw/")
        sys.exit(1)
    
    try:
        # –ó–∞–ø—É—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
        if args.mode == 'analysis':
            run_analysis_only(config)
        elif args.mode == 'baseline':
            run_baseline_only(config)
        elif args.mode == 'synthetic':
            run_synthetic_experiments(config)
        elif args.mode == 'full':
            run_full_experiments(config)
        
        print("\nüéâ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()