#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
"""

import sys
from pathlib import Path
import importlib

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
    if sys.version_info < (3, 8):
        print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+, –Ω–∞–π–¥–µ–Ω {sys.version}")
        return False
    else:
        print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
        return True

def check_project_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    
    required_dirs = [
        'src',
        'src/data',
        'src/generation', 
        'src/models',
        'src/experiments',
        'src/utils',
        'data',
        'data/raw',
        'results',
        'notebooks'
    ]
    
    required_files = [
        'main.py',
        'config.yaml',
        'requirements.txt',
        'README.md',
        'src/__init__.py',
        'src/data/data_loader.py',
        'src/data/data_analyzer.py',
        'src/generation/template_generator.py',
        'src/generation/llm_generator.py',
        'src/models/classifier.py',
        'src/experiments/experiment_runner.py',
        'src/utils/metrics.py',
        'src/utils/visualization.py'
    ]
    
    all_good = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    for dir_path in required_dirs:
        if Path(dir_path).exists():
            print(f"‚úÖ {dir_path}/")
        else:
            print(f"‚ùå {dir_path}/ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            all_good = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    for file_path in required_files:
        if Path(file_path).exists():
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            all_good = False
    
    return all_good

def check_data_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
    
    data_files = [
        'data/raw/DS_—Ö–∞–∫–∞—Ç–æ–Ω_–Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö_train_231208_1030.xlsx',
        'data/raw/DS_—Ö–∞–∫–∞—Ç–æ–Ω_–Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö_test_231208_1030.xlsx', 
        'data/raw/DS_—Ö–∞–∫–∞—Ç–æ–Ω_—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫_—É—Å–ª—É–≥_231208_1030.xlsx'
    ]
    
    all_good = True
    for file_path in data_files:
        if Path(file_path).exists():
            size_mb = Path(file_path).stat().st_size / (1024 * 1024)
            print(f"‚úÖ {file_path} ({size_mb:.1f} MB)")
        else:
            print(f"‚ùå {file_path} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            print(f"   –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏–∑ original medical_services_classification/data/raw/")
            all_good = False
    
    return all_good

def check_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    dependencies = [
        'pandas',
        'numpy',
        'sklearn',
        'matplotlib',
        'seaborn'
    ]
    
    # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    optional_deps = [
        'sentence_transformers',
        'transformers', 
        'torch',
        'yaml'
    ]
    
    all_good = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    for dep in dependencies:
        try:
            importlib.import_module(dep)
            print(f"‚úÖ {dep}")
        except ImportError:
            print(f"‚ùå {dep} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_good = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print("\n–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    for dep in optional_deps:
        try:
            importlib.import_module(dep)
            print(f"‚úÖ {dep}")
        except ImportError:
            print(f"‚ö†Ô∏è  {dep} - –Ω–µ –Ω–∞–π–¥–µ–Ω (–ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞)")
    
    return all_good

def check_project_modules():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
    sys.path.insert(0, str(Path.cwd()))
    
    project_modules = [
        'src.data.data_loader',
        'src.data.data_analyzer',
        'src.generation.template_generator',
        'src.generation.llm_generator',
        'src.models.classifier',
        'src.experiments.experiment_runner',
        'src.utils.metrics',
        'src.utils.visualization'
    ]
    
    all_good = True
    for module in project_modules:
        try:
            importlib.import_module(module)
            print(f"‚úÖ {module}")
        except ImportError as e:
            print(f"‚ùå {module} - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            all_good = False
        except Exception as e:
            print(f"‚ö†Ô∏è  {module} - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {e}")
    
    return all_good

def run_basic_functionality_test():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüß™ –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
    
    try:
        # –¢–µ—Å—Ç data loader
        sys.path.insert(0, str(Path.cwd()))
        from src.data.data_loader import InsuranceDataLoader
        
        loader = InsuranceDataLoader()
        print("‚úÖ InsuranceDataLoader —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç template generator
        from src.generation.template_generator import TemplateDataGenerator
        generator = TemplateDataGenerator()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
        test_letter = generator.generate_class_0_letter()
        if len(test_letter) > 10:
            print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞–∑–æ–≤–æ–º —Ç–µ—Å—Ç–µ: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    print("=" * 50)
    
    checks = [
        ("–í–µ—Ä—Å–∏—è Python", check_python_version),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞", check_project_structure),
        ("–§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö", check_data_files),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check_imports),
        ("–ú–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞", check_project_modules),
        ("–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", run_basic_functionality_test)
    ]
    
    results = []
    for name, check_func in checks:
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ '{name}': {e}")
            results.append((name, False))
    
    # –°–≤–æ–¥–∫–∞
    print("\n" + "=" * 50)
    print("üìã –°–í–û–î–ö–ê –ü–†–û–í–ï–†–û–ö:")
    
    all_passed = True
    for name, passed in results:
        status = "‚úÖ –ü–†–û–®–õ–ê" if passed else "‚ùå –ù–ï –ü–†–û–®–õ–ê"
        print(f"{name}: {status}")
        if not passed:
            all_passed = False
    
    print("\n" + "=" * 50)
    if all_passed:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("–ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤.")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("python main.py --mode analysis")
    else:
        print("‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´")
        print("–£—Å—Ç—Ä–∞–Ω–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤.")
        print("\n–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
        print("pip install -r requirements.txt")
        
    return all_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)